

/*

TASK 1:

ATM INTERFACE

The ATMs in our cities are built on Java, as we have all seen them. It is a console-based application with five different classes. In order to use the system, the user must enter his or her
user ID and pin when it starts. Once the details are entered successfully, ATM functionality is unlocked. As a result of the project, the following operations can be performed:

TRANSACTIONS HISTORY
WITHDRAW 
DEPOSIT 
TRANSFER 
QUIT

*/

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class User {
    private String userID;
    private String pin;
    private double balance;
    private List<String> transactionHistory;

    public User(String userID, String pin, double balance) {
        this.userID = userID;
        this.pin = pin;
        this.balance = balance;
        this.transactionHistory = new ArrayList<>();
    }

    public String getUserID() {
        return userID;
    }

    public String getPin() {
        return pin;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        balance += amount;
        transactionHistory.add("Deposit: +$" + amount);
    }

    public boolean withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            transactionHistory.add("Withdrawal: -$" + amount);
            return true;
        }
        return false;
    }

    public void transfer(User receiver, double amount) {
        if (withdraw(amount)) {
            receiver.deposit(amount);
            transactionHistory.add("Transfer to " + receiver.getUserID() + ": -$" + amount);
        }
    }

    public List<String> getTransactionHistory() {
        return transactionHistory;
    }
}

class ATMInterface {
    private Scanner scanner;
    private List<User> users;
    private User currentUser;

    public ATMInterface() {
        scanner = new Scanner(System.in);
        users = new ArrayList<>();
        // Add 10 users (modify as needed)
        for (int i = 1; i <= 10; i++) {
            users.add(new User("User" + i, "1234", 1000.0));
        }
    }

    public void start() {
        System.out.println("Welcome to the ATM system!");

        // Simulated user login
        boolean loggedIn = false;
        while (!loggedIn) {
            System.out.print("Enter your user ID: ");
            String userID = scanner.nextLine().trim();

            System.out.print("Enter your PIN: ");
            String pin = scanner.nextLine().trim();

            for (User user : users) {
                if (user.getUserID().equals(userID) && user.getPin().equals(pin)) {
                    currentUser = user;
                    loggedIn = true;
                    break;
                }
            }

            if (!loggedIn) {
                System.out.println("Invalid credentials. Please try again.");
            }
        }

        // Main ATM interface loop
        while (true) {
            displayMenu();
            String choice = scanner.nextLine().trim();

            switch (choice) {
                case "1":
                    performDeposit();
                    break;
                case "2":
                    performWithdrawal();
                    break;
                case "3":
                    performTransfer();
                    break;
                case "4":
                    displayTransactionHistory();
                    break;
                case "5":
                    System.out.println("Thank you for using the ATM. Goodbye!");
                    return;
                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
    }

    private void displayMenu() {
        System.out.println("ATM MENU:");
        System.out.println("1. Deposit");
        System.out.println("2. Withdraw");
        System.out.println("3. Transfer");
        System.out.println("4. Transaction History");
        System.out.println("5. Quit");
        System.out.print("Enter your choice: ");
    }

    private void performDeposit() {
        System.out.print("Enter the deposit amount: ");
        double amount = Double.parseDouble(scanner.nextLine().trim());
        currentUser.deposit(amount);
        System.out.println("Deposit successful. New balance: $" + currentUser.getBalance());
    }

    private void performWithdrawal() {
        System.out.print("Enter the withdrawal amount: ");
        double amount = Double.parseDouble(scanner.nextLine().trim());

        if (currentUser.withdraw(amount)) {
            System.out.println("Withdrawal successful. New balance: $" + currentUser.getBalance());
        } else {
            System.out.println("Insufficient funds.");
        }
    }

    private void performTransfer() {
        System.out.print("Enter the receiver's user ID: ");
        String receiverID = scanner.nextLine().trim();

        User receiver = null;
        for (User user : users) {
            if (user.getUserID().equals(receiverID)) {
                receiver = user;
                break;
            }
        }

        if (receiver == null) {
            System.out.println("Receiver not found.");
            return;
        }

        System.out.print("Enter the transfer amount: ");
        double amount = Double.parseDouble(scanner.nextLine().trim());

        currentUser.transfer(receiver, amount);
        System.out.println("Transfer successful. New balance: $" + currentUser.getBalance());
    }

    private void displayTransactionHistory() {
        System.out.println("Transaction History for " + currentUser.getUserID() + ":");
        List<String> history = currentUser.getTransactionHistory();
        for (String entry : history) {
            System.out.println(entry);
        }
    }
}

public class Main {
    public static void main(String[] args) {
        ATMInterface atmInterface = new ATMInterface();
        atmInterface.start();
    }
}


/*

Output 1:

Welcome to the ATM system!
Enter your user ID: User1
Enter your PIN: 1234
ATM MENU:
1. Deposit
2. Withdraw
3. Transfer
4. Transaction History
5. Quit
Enter your choice: 5
Thank you for using the ATM. Goodbye!

*/


/*

Output 2:

Welcome to the ATM system!
Enter your user ID: User1
Enter your PIN: 1234
ATM MENU:
1. Deposit
2. Withdraw
3. Transfer
4. Transaction History
5. Quit
Enter your choice: 1
Enter the deposit amount: 1000
Deposit successful. New balance: $2000.0
ATM MENU:
1. Deposit
2. Withdraw
3. Transfer
4. Transaction History
5. Quit
Enter your choice: 2
Enter the withdrawal amount: 599
Withdrawal successful. New balance: $1401.0
ATM MENU:
1. Deposit
2. Withdraw
3. Transfer
4. Transaction History
5. Quit
Enter your choice: 3
Enter the receiver's user ID: User2
Enter the transfer amount: 200
Transfer successful. New balance: $1201.0
ATM MENU:
1. Deposit
2. Withdraw
3. Transfer
4. Transaction History
5. Quit
Enter your choice: 4
Transaction History for User1:
Deposit: +$1000.0
Withdrawal: -$599.0
Withdrawal: -$200.0
Transfer to User2: -$200.0
ATM MENU:
1. Deposit
2. Withdraw
3. Transfer
4. Transaction History
5. Quit
Enter your choice: 5
Thank you for using the ATM. Goodbye!

*/

/*

Output 3:

Welcome to the ATM system!
Enter your user ID: 1
Enter your PIN: 1234
Invalid credentials. Please try again.
Enter your user ID: no
Enter your PIN: 1234
Invalid credentials. Please try again.
Enter your user ID: User10
Enter your PIN: 1234
ATM MENU:
1. Deposit
2. Withdraw
3. Transfer
4. Transaction History
5. Quit
Enter your choice: 5
Thank you for using the ATM. Goodbye!


*/
